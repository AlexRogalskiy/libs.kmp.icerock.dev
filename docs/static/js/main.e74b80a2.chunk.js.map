{"version":3,"sources":["index.js"],"names":["Copyright","variant","color","align","href","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","Body","props","state","libraries","fetch","then","response","json","setState","catch","error","containerButtons","containerGrid","this","container","className","classes","justify","item","items","map","library","name","groupId","artifactId","latestVersion","versions","length","platforms","Object","keys","targets","key","target","platform","filter","v","i","a","indexOf","latestVersionName","version","kotlin","join","xs","sm","gutterBottom","component","size","github","maxWidth","paragraph","React","Component","ReactDOM","Fragment","document","querySelector"],"mappings":"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","file":"static/js/main.e74b80a2.chunk.js","sourcesContent":["/*\n * Copyright 2020 IceRock MAG Inc. Use of this source code is governed by the Apache 2.0 license.\n */\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport * as ReactDOM from \"react-dom\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://icerock.dev/\">\n        IceRock Development\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      libraries: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"data.json\")\n      .then(response => response.json())\n      .then(libraries => {\n        this.setState({libraries: libraries});\n\n        // libraries.forEach(library => {\n        // let cardRoot = template.cloneNode(true);\n        // cardRoot.attributes.removeNamedItem(\"id\");\n        //\n        // let titleNode = cardRoot.querySelector(\"#library-title\");\n        // titleNode.attributes.removeNamedItem(\"id\");\n        // titleNode.textContent = library.groupId + \":\" + library.artifactId;\n        //\n        // let descriptionNode = cardRoot.querySelector(\"#library-description\");\n        // descriptionNode.attributes.removeNamedItem(\"id\");\n        // descriptionNode.textContent = null;\n        // library.versions.forEach(version => {\n        //   let versionParagraph = document.createElement(\"p\");\n        //   let platforms = Object.keys(version.targets)\n        //     .map(key => {\n        //       let target = version.targets[key];\n        //       if (target.target != null) return target.target;\n        //       else return target.platform;\n        //     })\n        //     .filter((v, i, a) => a.indexOf(v) === i)\n        //     .reduce((result, platform) => result + \", \" + platform, \"\");\n        //   versionParagraph.textContent = version.version + \" - kotlin \" + version.kotlin + platforms;\n        //   descriptionNode.appendChild(versionParagraph);\n        // });\n        //\n        // let githubLinkNode = cardRoot.querySelector(\"#library-github\");\n        // githubLinkNode.attributes.removeNamedItem(\"id\");\n        // githubLinkNode.setAttribute(\"href\", library.github);\n        //\n        // componentHandler.upgradeElement(cardRoot);\n        // content.appendChild(cardRoot);\n        // });\n      })\n      .catch(error => {\n        // let textNode = document.createTextNode(error);\n        // content.appendChild(textNode);\n      });\n  }\n\n  render() {\n    const libraries = this.state.libraries;\n    let containerButtons;\n    let containerGrid;\n    if (libraries == null) {\n      containerButtons = <div/>;\n      containerGrid = <Grid container spacing={4}/>;\n    } else {\n      containerButtons = <div className={this.props.classes.heroButtons}>\n        <Grid container spacing={2} justify=\"center\">\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\">\n              Main call to action\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"outlined\" color=\"primary\">\n              Secondary action\n            </Button>\n          </Grid>\n        </Grid>\n      </div>;\n\n      let items = libraries.map(library => {\n        let name = library.groupId + \":\" + library.artifactId;\n        let latestVersion = library.versions[library.versions.length - 1];\n        let platforms = Object.keys(latestVersion.targets)\n          .map(key => {\n            let target = latestVersion.targets[key];\n            if (target.target != null) return target.target;\n            else return target.platform;\n          })\n          .filter((v, i, a) => a.indexOf(v) === i);\n\n        let latestVersionName = \"Latest: \" + latestVersion.version;\n        let kotlin = \"Kotlin:\" + latestVersion.kotlin;\n        let targets = \"Targets: \" + platforms.join(\", \");\n\n        return <Grid item key={library} xs={12} sm={6} >\n          {/*md={4}*/}\n          <Card className={this.props.classes.card}>\n            {/*<CardMedia*/}\n            {/*  className={this.props.classes.cardMedia}*/}\n            {/*  image=\"https://source.unsplash.com/random\"*/}\n            {/*  title=\"Image title\"*/}\n            {/*/>*/}\n            <CardContent className={this.props.classes.cardContent}>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {name}\n              </Typography>\n              <Typography>{latestVersionName}</Typography>\n              <Typography>{kotlin}</Typography>\n              <Typography>{targets}</Typography>\n            </CardContent>\n            <CardActions>\n              <Button size=\"small\" color=\"primary\" href={library.github} target={\"_blank\"}>\n                GitHub\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>;\n      });\n\n      containerGrid = <Grid container spacing={4}>{items}</Grid>;\n    }\n\n    return (\n      <main>\n        {/* Hero unit */}\n        <div className={this.props.classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Kotlin Multiplatform libraries\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Here is list of Kotlin Multiplatform libraries with auto-fetch information directly from maven\n              repositories.\n            </Typography>\n            {containerButtons}\n          </Container>\n        </div>\n        <Container className={this.props.classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          {containerGrid}\n        </Container>\n      </main>\n    );\n  }\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline/>\n      <Body classes={classes}/>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        {/*<Typography variant=\"h6\" align=\"center\" gutterBottom>*/}\n        {/*  Footer*/}\n        {/*</Typography>*/}\n        {/*<Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">*/}\n        {/*  Something here to give the footer a purpose!*/}\n        {/*</Typography>*/}\n        <Copyright/>\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\nReactDOM.render(<App/>, document.querySelector(\"#app\"));\n"],"sourceRoot":""}